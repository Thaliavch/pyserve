// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensor.proto
// Protobuf Java Version: 4.31.0

package io.pyserve.inference.v1;

@com.google.protobuf.Generated
public final class Tensor {
  private Tensor() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 31,
      /* patch= */ 0,
      /* suffix= */ "",
      Tensor.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code io.pyserve.inference.v1.DataType}
   */
  public enum DataType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INVALID = 0;</code>
     */
    INVALID(0),
    /**
     * <code>BOOL = 3;</code>
     */
    BOOL(3),
    /**
     * <code>INT8 = 4;</code>
     */
    INT8(4),
    /**
     * <code>INT16 = 5;</code>
     */
    INT16(5),
    /**
     * <code>INT32 = 6;</code>
     */
    INT32(6),
    /**
     * <code>HALF = 7;</code>
     */
    HALF(7),
    /**
     * <code>INT64 = 8;</code>
     */
    INT64(8),
    /**
     * <code>UINT32 = 9;</code>
     */
    UINT32(9),
    /**
     * <code>UINT64 = 10;</code>
     */
    UINT64(10),
    /**
     * <pre>
     * Uses int8_val
     * </pre>
     *
     * <code>QINT8 = 17;</code>
     */
    QINT8(17),
    /**
     * <pre>
     * Uses uint32_val (interpreted as uint8)
     * </pre>
     *
     * <code>QUINT8 = 18;</code>
     */
    QUINT8(18),
    /**
     * <code>QINT16 = 19;</code>
     */
    QINT16(19),
    /**
     * <code>QUINT16 = 20;</code>
     */
    QUINT16(20),
    /**
     * <code>QINT32 = 21;</code>
     */
    QINT32(21),
    /**
     * <code>FLOAT = 11;</code>
     */
    FLOAT(11),
    /**
     * <code>BFLOAT16 = 12;</code>
     */
    BFLOAT16(12),
    /**
     * <code>DOUBLE = 13;</code>
     */
    DOUBLE(13),
    /**
     * <code>STRING_VAL = 14;</code>
     */
    STRING_VAL(14),
    /**
     * <code>RAW_BYTES = 15;</code>
     */
    RAW_BYTES(15),
    /**
     * <code>STRING_PAYLOAD = 16;</code>
     */
    STRING_PAYLOAD(16),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 0,
        /* suffix= */ "",
        DataType.class.getName());
    }
    /**
     * <code>INVALID = 0;</code>
     */
    public static final int INVALID_VALUE = 0;
    /**
     * <code>BOOL = 3;</code>
     */
    public static final int BOOL_VALUE = 3;
    /**
     * <code>INT8 = 4;</code>
     */
    public static final int INT8_VALUE = 4;
    /**
     * <code>INT16 = 5;</code>
     */
    public static final int INT16_VALUE = 5;
    /**
     * <code>INT32 = 6;</code>
     */
    public static final int INT32_VALUE = 6;
    /**
     * <code>HALF = 7;</code>
     */
    public static final int HALF_VALUE = 7;
    /**
     * <code>INT64 = 8;</code>
     */
    public static final int INT64_VALUE = 8;
    /**
     * <code>UINT32 = 9;</code>
     */
    public static final int UINT32_VALUE = 9;
    /**
     * <code>UINT64 = 10;</code>
     */
    public static final int UINT64_VALUE = 10;
    /**
     * <pre>
     * Uses int8_val
     * </pre>
     *
     * <code>QINT8 = 17;</code>
     */
    public static final int QINT8_VALUE = 17;
    /**
     * <pre>
     * Uses uint32_val (interpreted as uint8)
     * </pre>
     *
     * <code>QUINT8 = 18;</code>
     */
    public static final int QUINT8_VALUE = 18;
    /**
     * <code>QINT16 = 19;</code>
     */
    public static final int QINT16_VALUE = 19;
    /**
     * <code>QUINT16 = 20;</code>
     */
    public static final int QUINT16_VALUE = 20;
    /**
     * <code>QINT32 = 21;</code>
     */
    public static final int QINT32_VALUE = 21;
    /**
     * <code>FLOAT = 11;</code>
     */
    public static final int FLOAT_VALUE = 11;
    /**
     * <code>BFLOAT16 = 12;</code>
     */
    public static final int BFLOAT16_VALUE = 12;
    /**
     * <code>DOUBLE = 13;</code>
     */
    public static final int DOUBLE_VALUE = 13;
    /**
     * <code>STRING_VAL = 14;</code>
     */
    public static final int STRING_VAL_VALUE = 14;
    /**
     * <code>RAW_BYTES = 15;</code>
     */
    public static final int RAW_BYTES_VALUE = 15;
    /**
     * <code>STRING_PAYLOAD = 16;</code>
     */
    public static final int STRING_PAYLOAD_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DataType forNumber(int value) {
      switch (value) {
        case 0: return INVALID;
        case 3: return BOOL;
        case 4: return INT8;
        case 5: return INT16;
        case 6: return INT32;
        case 7: return HALF;
        case 8: return INT64;
        case 9: return UINT32;
        case 10: return UINT64;
        case 17: return QINT8;
        case 18: return QUINT8;
        case 19: return QINT16;
        case 20: return QUINT16;
        case 21: return QINT32;
        case 11: return FLOAT;
        case 12: return BFLOAT16;
        case 13: return DOUBLE;
        case 14: return STRING_VAL;
        case 15: return RAW_BYTES;
        case 16: return STRING_PAYLOAD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataType>() {
            public DataType findValueByNumber(int number) {
              return DataType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.pyserve.inference.v1.Tensor.getDescriptor().getEnumTypes().get(0);
    }

    private static final DataType[] VALUES = values();

    public static DataType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:io.pyserve.inference.v1.DataType)
  }

  public interface TorchTensorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.pyserve.inference.v1.TorchTensorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
     * @return The enum numeric value on the wire for dtype.
     */
    int getDtypeValue();
    /**
     * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
     * @return The dtype.
     */
    io.pyserve.inference.v1.Tensor.DataType getDtype();

    /**
     * <code>repeated int64 tensor_shape = 2;</code>
     * @return A list containing the tensorShape.
     */
    java.util.List<java.lang.Long> getTensorShapeList();
    /**
     * <code>repeated int64 tensor_shape = 2;</code>
     * @return The count of tensorShape.
     */
    int getTensorShapeCount();
    /**
     * <code>repeated int64 tensor_shape = 2;</code>
     * @param index The index of the element to return.
     * @return The tensorShape at the given index.
     */
    long getTensorShape(int index);

    /**
     * <code>repeated bool bool_val = 3 [packed = true];</code>
     * @return A list containing the boolVal.
     */
    java.util.List<java.lang.Boolean> getBoolValList();
    /**
     * <code>repeated bool bool_val = 3 [packed = true];</code>
     * @return The count of boolVal.
     */
    int getBoolValCount();
    /**
     * <code>repeated bool bool_val = 3 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The boolVal at the given index.
     */
    boolean getBoolVal(int index);

    /**
     * <code>repeated int32 int8_val = 4 [packed = true];</code>
     * @return A list containing the int8Val.
     */
    java.util.List<java.lang.Integer> getInt8ValList();
    /**
     * <code>repeated int32 int8_val = 4 [packed = true];</code>
     * @return The count of int8Val.
     */
    int getInt8ValCount();
    /**
     * <code>repeated int32 int8_val = 4 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The int8Val at the given index.
     */
    int getInt8Val(int index);

    /**
     * <code>repeated int32 int16_val = 5 [packed = true];</code>
     * @return A list containing the int16Val.
     */
    java.util.List<java.lang.Integer> getInt16ValList();
    /**
     * <code>repeated int32 int16_val = 5 [packed = true];</code>
     * @return The count of int16Val.
     */
    int getInt16ValCount();
    /**
     * <code>repeated int32 int16_val = 5 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The int16Val at the given index.
     */
    int getInt16Val(int index);

    /**
     * <code>repeated int32 int_val = 6 [packed = true];</code>
     * @return A list containing the intVal.
     */
    java.util.List<java.lang.Integer> getIntValList();
    /**
     * <code>repeated int32 int_val = 6 [packed = true];</code>
     * @return The count of intVal.
     */
    int getIntValCount();
    /**
     * <code>repeated int32 int_val = 6 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The intVal at the given index.
     */
    int getIntVal(int index);

    /**
     * <code>repeated int32 half_val = 7 [packed = true];</code>
     * @return A list containing the halfVal.
     */
    java.util.List<java.lang.Integer> getHalfValList();
    /**
     * <code>repeated int32 half_val = 7 [packed = true];</code>
     * @return The count of halfVal.
     */
    int getHalfValCount();
    /**
     * <code>repeated int32 half_val = 7 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The halfVal at the given index.
     */
    int getHalfVal(int index);

    /**
     * <code>repeated int64 int64_val = 8 [packed = true];</code>
     * @return A list containing the int64Val.
     */
    java.util.List<java.lang.Long> getInt64ValList();
    /**
     * <code>repeated int64 int64_val = 8 [packed = true];</code>
     * @return The count of int64Val.
     */
    int getInt64ValCount();
    /**
     * <code>repeated int64 int64_val = 8 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The int64Val at the given index.
     */
    long getInt64Val(int index);

    /**
     * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
     * @return A list containing the uint32Val.
     */
    java.util.List<java.lang.Integer> getUint32ValList();
    /**
     * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
     * @return The count of uint32Val.
     */
    int getUint32ValCount();
    /**
     * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The uint32Val at the given index.
     */
    int getUint32Val(int index);

    /**
     * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
     * @return A list containing the uint64Val.
     */
    java.util.List<java.lang.Long> getUint64ValList();
    /**
     * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
     * @return The count of uint64Val.
     */
    int getUint64ValCount();
    /**
     * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The uint64Val at the given index.
     */
    long getUint64Val(int index);

    /**
     * <code>repeated float float_val = 11 [packed = true];</code>
     * @return A list containing the floatVal.
     */
    java.util.List<java.lang.Float> getFloatValList();
    /**
     * <code>repeated float float_val = 11 [packed = true];</code>
     * @return The count of floatVal.
     */
    int getFloatValCount();
    /**
     * <code>repeated float float_val = 11 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The floatVal at the given index.
     */
    float getFloatVal(int index);

    /**
     * <code>repeated float bfloat16_val = 12 [packed = true];</code>
     * @return A list containing the bfloat16Val.
     */
    java.util.List<java.lang.Float> getBfloat16ValList();
    /**
     * <code>repeated float bfloat16_val = 12 [packed = true];</code>
     * @return The count of bfloat16Val.
     */
    int getBfloat16ValCount();
    /**
     * <code>repeated float bfloat16_val = 12 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The bfloat16Val at the given index.
     */
    float getBfloat16Val(int index);

    /**
     * <code>repeated double double_val = 13 [packed = true];</code>
     * @return A list containing the doubleVal.
     */
    java.util.List<java.lang.Double> getDoubleValList();
    /**
     * <code>repeated double double_val = 13 [packed = true];</code>
     * @return The count of doubleVal.
     */
    int getDoubleValCount();
    /**
     * <code>repeated double double_val = 13 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The doubleVal at the given index.
     */
    double getDoubleVal(int index);

    /**
     * <code>repeated string string_val = 14;</code>
     * @return A list containing the stringVal.
     */
    java.util.List<java.lang.String>
        getStringValList();
    /**
     * <code>repeated string string_val = 14;</code>
     * @return The count of stringVal.
     */
    int getStringValCount();
    /**
     * <code>repeated string string_val = 14;</code>
     * @param index The index of the element to return.
     * @return The stringVal at the given index.
     */
    java.lang.String getStringVal(int index);
    /**
     * <code>repeated string string_val = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the stringVal at the given index.
     */
    com.google.protobuf.ByteString
        getStringValBytes(int index);

    /**
     * <pre>
     * Raw bytes (fallback/custom mode)
     * </pre>
     *
     * <code>bytes tensor_content = 15;</code>
     * @return The tensorContent.
     */
    com.google.protobuf.ByteString getTensorContent();

    /**
     * <pre>
     * for things like serialized JSON or Base64
     * </pre>
     *
     * <code>string custom_payload = 16;</code>
     * @return The customPayload.
     */
    java.lang.String getCustomPayload();
    /**
     * <pre>
     * for things like serialized JSON or Base64
     * </pre>
     *
     * <code>string custom_payload = 16;</code>
     * @return The bytes for customPayload.
     */
    com.google.protobuf.ByteString
        getCustomPayloadBytes();
  }
  /**
   * Protobuf type {@code io.pyserve.inference.v1.TorchTensorProto}
   */
  public static final class TorchTensorProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.pyserve.inference.v1.TorchTensorProto)
      TorchTensorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 0,
        /* suffix= */ "",
        TorchTensorProto.class.getName());
    }
    // Use TorchTensorProto.newBuilder() to construct.
    private TorchTensorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TorchTensorProto() {
      dtype_ = 0;
      tensorShape_ = emptyLongList();
      boolVal_ = emptyBooleanList();
      int8Val_ = emptyIntList();
      int16Val_ = emptyIntList();
      intVal_ = emptyIntList();
      halfVal_ = emptyIntList();
      int64Val_ = emptyLongList();
      uint32Val_ = emptyIntList();
      uint64Val_ = emptyLongList();
      floatVal_ = emptyFloatList();
      bfloat16Val_ = emptyFloatList();
      doubleVal_ = emptyDoubleList();
      stringVal_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      tensorContent_ = com.google.protobuf.ByteString.EMPTY;
      customPayload_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.pyserve.inference.v1.Tensor.internal_static_io_pyserve_inference_v1_TorchTensorProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.pyserve.inference.v1.Tensor.internal_static_io_pyserve_inference_v1_TorchTensorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.pyserve.inference.v1.Tensor.TorchTensorProto.class, io.pyserve.inference.v1.Tensor.TorchTensorProto.Builder.class);
    }

    public static final int DTYPE_FIELD_NUMBER = 1;
    private int dtype_ = 0;
    /**
     * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
     * @return The enum numeric value on the wire for dtype.
     */
    @java.lang.Override public int getDtypeValue() {
      return dtype_;
    }
    /**
     * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
     * @return The dtype.
     */
    @java.lang.Override public io.pyserve.inference.v1.Tensor.DataType getDtype() {
      io.pyserve.inference.v1.Tensor.DataType result = io.pyserve.inference.v1.Tensor.DataType.forNumber(dtype_);
      return result == null ? io.pyserve.inference.v1.Tensor.DataType.UNRECOGNIZED : result;
    }

    public static final int TENSOR_SHAPE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList tensorShape_ =
        emptyLongList();
    /**
     * <code>repeated int64 tensor_shape = 2;</code>
     * @return A list containing the tensorShape.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getTensorShapeList() {
      return tensorShape_;
    }
    /**
     * <code>repeated int64 tensor_shape = 2;</code>
     * @return The count of tensorShape.
     */
    public int getTensorShapeCount() {
      return tensorShape_.size();
    }
    /**
     * <code>repeated int64 tensor_shape = 2;</code>
     * @param index The index of the element to return.
     * @return The tensorShape at the given index.
     */
    public long getTensorShape(int index) {
      return tensorShape_.getLong(index);
    }
    private int tensorShapeMemoizedSerializedSize = -1;

    public static final int BOOL_VAL_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.BooleanList boolVal_ =
        emptyBooleanList();
    /**
     * <code>repeated bool bool_val = 3 [packed = true];</code>
     * @return A list containing the boolVal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Boolean>
        getBoolValList() {
      return boolVal_;
    }
    /**
     * <code>repeated bool bool_val = 3 [packed = true];</code>
     * @return The count of boolVal.
     */
    public int getBoolValCount() {
      return boolVal_.size();
    }
    /**
     * <code>repeated bool bool_val = 3 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The boolVal at the given index.
     */
    public boolean getBoolVal(int index) {
      return boolVal_.getBoolean(index);
    }
    private int boolValMemoizedSerializedSize = -1;

    public static final int INT8_VAL_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList int8Val_ =
        emptyIntList();
    /**
     * <code>repeated int32 int8_val = 4 [packed = true];</code>
     * @return A list containing the int8Val.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getInt8ValList() {
      return int8Val_;
    }
    /**
     * <code>repeated int32 int8_val = 4 [packed = true];</code>
     * @return The count of int8Val.
     */
    public int getInt8ValCount() {
      return int8Val_.size();
    }
    /**
     * <code>repeated int32 int8_val = 4 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The int8Val at the given index.
     */
    public int getInt8Val(int index) {
      return int8Val_.getInt(index);
    }
    private int int8ValMemoizedSerializedSize = -1;

    public static final int INT16_VAL_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList int16Val_ =
        emptyIntList();
    /**
     * <code>repeated int32 int16_val = 5 [packed = true];</code>
     * @return A list containing the int16Val.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getInt16ValList() {
      return int16Val_;
    }
    /**
     * <code>repeated int32 int16_val = 5 [packed = true];</code>
     * @return The count of int16Val.
     */
    public int getInt16ValCount() {
      return int16Val_.size();
    }
    /**
     * <code>repeated int32 int16_val = 5 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The int16Val at the given index.
     */
    public int getInt16Val(int index) {
      return int16Val_.getInt(index);
    }
    private int int16ValMemoizedSerializedSize = -1;

    public static final int INT_VAL_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList intVal_ =
        emptyIntList();
    /**
     * <code>repeated int32 int_val = 6 [packed = true];</code>
     * @return A list containing the intVal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getIntValList() {
      return intVal_;
    }
    /**
     * <code>repeated int32 int_val = 6 [packed = true];</code>
     * @return The count of intVal.
     */
    public int getIntValCount() {
      return intVal_.size();
    }
    /**
     * <code>repeated int32 int_val = 6 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The intVal at the given index.
     */
    public int getIntVal(int index) {
      return intVal_.getInt(index);
    }
    private int intValMemoizedSerializedSize = -1;

    public static final int HALF_VAL_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList halfVal_ =
        emptyIntList();
    /**
     * <code>repeated int32 half_val = 7 [packed = true];</code>
     * @return A list containing the halfVal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getHalfValList() {
      return halfVal_;
    }
    /**
     * <code>repeated int32 half_val = 7 [packed = true];</code>
     * @return The count of halfVal.
     */
    public int getHalfValCount() {
      return halfVal_.size();
    }
    /**
     * <code>repeated int32 half_val = 7 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The halfVal at the given index.
     */
    public int getHalfVal(int index) {
      return halfVal_.getInt(index);
    }
    private int halfValMemoizedSerializedSize = -1;

    public static final int INT64_VAL_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList int64Val_ =
        emptyLongList();
    /**
     * <code>repeated int64 int64_val = 8 [packed = true];</code>
     * @return A list containing the int64Val.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getInt64ValList() {
      return int64Val_;
    }
    /**
     * <code>repeated int64 int64_val = 8 [packed = true];</code>
     * @return The count of int64Val.
     */
    public int getInt64ValCount() {
      return int64Val_.size();
    }
    /**
     * <code>repeated int64 int64_val = 8 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The int64Val at the given index.
     */
    public long getInt64Val(int index) {
      return int64Val_.getLong(index);
    }
    private int int64ValMemoizedSerializedSize = -1;

    public static final int UINT32_VAL_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList uint32Val_ =
        emptyIntList();
    /**
     * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
     * @return A list containing the uint32Val.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getUint32ValList() {
      return uint32Val_;
    }
    /**
     * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
     * @return The count of uint32Val.
     */
    public int getUint32ValCount() {
      return uint32Val_.size();
    }
    /**
     * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The uint32Val at the given index.
     */
    public int getUint32Val(int index) {
      return uint32Val_.getInt(index);
    }
    private int uint32ValMemoizedSerializedSize = -1;

    public static final int UINT64_VAL_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList uint64Val_ =
        emptyLongList();
    /**
     * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
     * @return A list containing the uint64Val.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getUint64ValList() {
      return uint64Val_;
    }
    /**
     * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
     * @return The count of uint64Val.
     */
    public int getUint64ValCount() {
      return uint64Val_.size();
    }
    /**
     * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The uint64Val at the given index.
     */
    public long getUint64Val(int index) {
      return uint64Val_.getLong(index);
    }
    private int uint64ValMemoizedSerializedSize = -1;

    public static final int FLOAT_VAL_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.FloatList floatVal_ =
        emptyFloatList();
    /**
     * <code>repeated float float_val = 11 [packed = true];</code>
     * @return A list containing the floatVal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getFloatValList() {
      return floatVal_;
    }
    /**
     * <code>repeated float float_val = 11 [packed = true];</code>
     * @return The count of floatVal.
     */
    public int getFloatValCount() {
      return floatVal_.size();
    }
    /**
     * <code>repeated float float_val = 11 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The floatVal at the given index.
     */
    public float getFloatVal(int index) {
      return floatVal_.getFloat(index);
    }
    private int floatValMemoizedSerializedSize = -1;

    public static final int BFLOAT16_VAL_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.FloatList bfloat16Val_ =
        emptyFloatList();
    /**
     * <code>repeated float bfloat16_val = 12 [packed = true];</code>
     * @return A list containing the bfloat16Val.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getBfloat16ValList() {
      return bfloat16Val_;
    }
    /**
     * <code>repeated float bfloat16_val = 12 [packed = true];</code>
     * @return The count of bfloat16Val.
     */
    public int getBfloat16ValCount() {
      return bfloat16Val_.size();
    }
    /**
     * <code>repeated float bfloat16_val = 12 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The bfloat16Val at the given index.
     */
    public float getBfloat16Val(int index) {
      return bfloat16Val_.getFloat(index);
    }
    private int bfloat16ValMemoizedSerializedSize = -1;

    public static final int DOUBLE_VAL_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList doubleVal_ =
        emptyDoubleList();
    /**
     * <code>repeated double double_val = 13 [packed = true];</code>
     * @return A list containing the doubleVal.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getDoubleValList() {
      return doubleVal_;
    }
    /**
     * <code>repeated double double_val = 13 [packed = true];</code>
     * @return The count of doubleVal.
     */
    public int getDoubleValCount() {
      return doubleVal_.size();
    }
    /**
     * <code>repeated double double_val = 13 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The doubleVal at the given index.
     */
    public double getDoubleVal(int index) {
      return doubleVal_.getDouble(index);
    }
    private int doubleValMemoizedSerializedSize = -1;

    public static final int STRING_VAL_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList stringVal_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string string_val = 14;</code>
     * @return A list containing the stringVal.
     */
    public com.google.protobuf.ProtocolStringList
        getStringValList() {
      return stringVal_;
    }
    /**
     * <code>repeated string string_val = 14;</code>
     * @return The count of stringVal.
     */
    public int getStringValCount() {
      return stringVal_.size();
    }
    /**
     * <code>repeated string string_val = 14;</code>
     * @param index The index of the element to return.
     * @return The stringVal at the given index.
     */
    public java.lang.String getStringVal(int index) {
      return stringVal_.get(index);
    }
    /**
     * <code>repeated string string_val = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the stringVal at the given index.
     */
    public com.google.protobuf.ByteString
        getStringValBytes(int index) {
      return stringVal_.getByteString(index);
    }

    public static final int TENSOR_CONTENT_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString tensorContent_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Raw bytes (fallback/custom mode)
     * </pre>
     *
     * <code>bytes tensor_content = 15;</code>
     * @return The tensorContent.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTensorContent() {
      return tensorContent_;
    }

    public static final int CUSTOM_PAYLOAD_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private volatile java.lang.Object customPayload_ = "";
    /**
     * <pre>
     * for things like serialized JSON or Base64
     * </pre>
     *
     * <code>string custom_payload = 16;</code>
     * @return The customPayload.
     */
    @java.lang.Override
    public java.lang.String getCustomPayload() {
      java.lang.Object ref = customPayload_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        customPayload_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * for things like serialized JSON or Base64
     * </pre>
     *
     * <code>string custom_payload = 16;</code>
     * @return The bytes for customPayload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCustomPayloadBytes() {
      java.lang.Object ref = customPayload_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        customPayload_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (dtype_ != io.pyserve.inference.v1.Tensor.DataType.INVALID.getNumber()) {
        output.writeEnum(1, dtype_);
      }
      if (getTensorShapeList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(tensorShapeMemoizedSerializedSize);
      }
      for (int i = 0; i < tensorShape_.size(); i++) {
        output.writeInt64NoTag(tensorShape_.getLong(i));
      }
      if (getBoolValList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(boolValMemoizedSerializedSize);
      }
      for (int i = 0; i < boolVal_.size(); i++) {
        output.writeBoolNoTag(boolVal_.getBoolean(i));
      }
      if (getInt8ValList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(int8ValMemoizedSerializedSize);
      }
      for (int i = 0; i < int8Val_.size(); i++) {
        output.writeInt32NoTag(int8Val_.getInt(i));
      }
      if (getInt16ValList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(int16ValMemoizedSerializedSize);
      }
      for (int i = 0; i < int16Val_.size(); i++) {
        output.writeInt32NoTag(int16Val_.getInt(i));
      }
      if (getIntValList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(intValMemoizedSerializedSize);
      }
      for (int i = 0; i < intVal_.size(); i++) {
        output.writeInt32NoTag(intVal_.getInt(i));
      }
      if (getHalfValList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(halfValMemoizedSerializedSize);
      }
      for (int i = 0; i < halfVal_.size(); i++) {
        output.writeInt32NoTag(halfVal_.getInt(i));
      }
      if (getInt64ValList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(int64ValMemoizedSerializedSize);
      }
      for (int i = 0; i < int64Val_.size(); i++) {
        output.writeInt64NoTag(int64Val_.getLong(i));
      }
      if (getUint32ValList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(uint32ValMemoizedSerializedSize);
      }
      for (int i = 0; i < uint32Val_.size(); i++) {
        output.writeUInt32NoTag(uint32Val_.getInt(i));
      }
      if (getUint64ValList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(uint64ValMemoizedSerializedSize);
      }
      for (int i = 0; i < uint64Val_.size(); i++) {
        output.writeUInt64NoTag(uint64Val_.getLong(i));
      }
      if (getFloatValList().size() > 0) {
        output.writeUInt32NoTag(90);
        output.writeUInt32NoTag(floatValMemoizedSerializedSize);
      }
      for (int i = 0; i < floatVal_.size(); i++) {
        output.writeFloatNoTag(floatVal_.getFloat(i));
      }
      if (getBfloat16ValList().size() > 0) {
        output.writeUInt32NoTag(98);
        output.writeUInt32NoTag(bfloat16ValMemoizedSerializedSize);
      }
      for (int i = 0; i < bfloat16Val_.size(); i++) {
        output.writeFloatNoTag(bfloat16Val_.getFloat(i));
      }
      if (getDoubleValList().size() > 0) {
        output.writeUInt32NoTag(106);
        output.writeUInt32NoTag(doubleValMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleVal_.size(); i++) {
        output.writeDoubleNoTag(doubleVal_.getDouble(i));
      }
      for (int i = 0; i < stringVal_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 14, stringVal_.getRaw(i));
      }
      if (!tensorContent_.isEmpty()) {
        output.writeBytes(15, tensorContent_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(customPayload_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 16, customPayload_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dtype_ != io.pyserve.inference.v1.Tensor.DataType.INVALID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, dtype_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tensorShape_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(tensorShape_.getLong(i));
        }
        size += dataSize;
        if (!getTensorShapeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        tensorShapeMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 1 * getBoolValList().size();
        size += dataSize;
        if (!getBoolValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        boolValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int8Val_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(int8Val_.getInt(i));
        }
        size += dataSize;
        if (!getInt8ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        int8ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int16Val_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(int16Val_.getInt(i));
        }
        size += dataSize;
        if (!getInt16ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        int16ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < intVal_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(intVal_.getInt(i));
        }
        size += dataSize;
        if (!getIntValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        intValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < halfVal_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(halfVal_.getInt(i));
        }
        size += dataSize;
        if (!getHalfValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        halfValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int64Val_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(int64Val_.getLong(i));
        }
        size += dataSize;
        if (!getInt64ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        int64ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < uint32Val_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(uint32Val_.getInt(i));
        }
        size += dataSize;
        if (!getUint32ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        uint32ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < uint64Val_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(uint64Val_.getLong(i));
        }
        size += dataSize;
        if (!getUint64ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        uint64ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatValList().size();
        size += dataSize;
        if (!getFloatValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        floatValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBfloat16ValList().size();
        size += dataSize;
        if (!getBfloat16ValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bfloat16ValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleValList().size();
        size += dataSize;
        if (!getDoubleValList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleValMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringVal_.size(); i++) {
          dataSize += computeStringSizeNoTag(stringVal_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringValList().size();
      }
      if (!tensorContent_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, tensorContent_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(customPayload_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(16, customPayload_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.pyserve.inference.v1.Tensor.TorchTensorProto)) {
        return super.equals(obj);
      }
      io.pyserve.inference.v1.Tensor.TorchTensorProto other = (io.pyserve.inference.v1.Tensor.TorchTensorProto) obj;

      if (dtype_ != other.dtype_) return false;
      if (!getTensorShapeList()
          .equals(other.getTensorShapeList())) return false;
      if (!getBoolValList()
          .equals(other.getBoolValList())) return false;
      if (!getInt8ValList()
          .equals(other.getInt8ValList())) return false;
      if (!getInt16ValList()
          .equals(other.getInt16ValList())) return false;
      if (!getIntValList()
          .equals(other.getIntValList())) return false;
      if (!getHalfValList()
          .equals(other.getHalfValList())) return false;
      if (!getInt64ValList()
          .equals(other.getInt64ValList())) return false;
      if (!getUint32ValList()
          .equals(other.getUint32ValList())) return false;
      if (!getUint64ValList()
          .equals(other.getUint64ValList())) return false;
      if (!getFloatValList()
          .equals(other.getFloatValList())) return false;
      if (!getBfloat16ValList()
          .equals(other.getBfloat16ValList())) return false;
      if (!getDoubleValList()
          .equals(other.getDoubleValList())) return false;
      if (!getStringValList()
          .equals(other.getStringValList())) return false;
      if (!getTensorContent()
          .equals(other.getTensorContent())) return false;
      if (!getCustomPayload()
          .equals(other.getCustomPayload())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DTYPE_FIELD_NUMBER;
      hash = (53 * hash) + dtype_;
      if (getTensorShapeCount() > 0) {
        hash = (37 * hash) + TENSOR_SHAPE_FIELD_NUMBER;
        hash = (53 * hash) + getTensorShapeList().hashCode();
      }
      if (getBoolValCount() > 0) {
        hash = (37 * hash) + BOOL_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getBoolValList().hashCode();
      }
      if (getInt8ValCount() > 0) {
        hash = (37 * hash) + INT8_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getInt8ValList().hashCode();
      }
      if (getInt16ValCount() > 0) {
        hash = (37 * hash) + INT16_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getInt16ValList().hashCode();
      }
      if (getIntValCount() > 0) {
        hash = (37 * hash) + INT_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getIntValList().hashCode();
      }
      if (getHalfValCount() > 0) {
        hash = (37 * hash) + HALF_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getHalfValList().hashCode();
      }
      if (getInt64ValCount() > 0) {
        hash = (37 * hash) + INT64_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getInt64ValList().hashCode();
      }
      if (getUint32ValCount() > 0) {
        hash = (37 * hash) + UINT32_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getUint32ValList().hashCode();
      }
      if (getUint64ValCount() > 0) {
        hash = (37 * hash) + UINT64_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getUint64ValList().hashCode();
      }
      if (getFloatValCount() > 0) {
        hash = (37 * hash) + FLOAT_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getFloatValList().hashCode();
      }
      if (getBfloat16ValCount() > 0) {
        hash = (37 * hash) + BFLOAT16_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getBfloat16ValList().hashCode();
      }
      if (getDoubleValCount() > 0) {
        hash = (37 * hash) + DOUBLE_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getDoubleValList().hashCode();
      }
      if (getStringValCount() > 0) {
        hash = (37 * hash) + STRING_VAL_FIELD_NUMBER;
        hash = (53 * hash) + getStringValList().hashCode();
      }
      hash = (37 * hash) + TENSOR_CONTENT_FIELD_NUMBER;
      hash = (53 * hash) + getTensorContent().hashCode();
      hash = (37 * hash) + CUSTOM_PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getCustomPayload().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.pyserve.inference.v1.Tensor.TorchTensorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.pyserve.inference.v1.Tensor.TorchTensorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code io.pyserve.inference.v1.TorchTensorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.pyserve.inference.v1.TorchTensorProto)
        io.pyserve.inference.v1.Tensor.TorchTensorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.pyserve.inference.v1.Tensor.internal_static_io_pyserve_inference_v1_TorchTensorProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.pyserve.inference.v1.Tensor.internal_static_io_pyserve_inference_v1_TorchTensorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.pyserve.inference.v1.Tensor.TorchTensorProto.class, io.pyserve.inference.v1.Tensor.TorchTensorProto.Builder.class);
      }

      // Construct using io.pyserve.inference.v1.Tensor.TorchTensorProto.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        dtype_ = 0;
        tensorShape_ = emptyLongList();
        boolVal_ = emptyBooleanList();
        int8Val_ = emptyIntList();
        int16Val_ = emptyIntList();
        intVal_ = emptyIntList();
        halfVal_ = emptyIntList();
        int64Val_ = emptyLongList();
        uint32Val_ = emptyIntList();
        uint64Val_ = emptyLongList();
        floatVal_ = emptyFloatList();
        bfloat16Val_ = emptyFloatList();
        doubleVal_ = emptyDoubleList();
        stringVal_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        tensorContent_ = com.google.protobuf.ByteString.EMPTY;
        customPayload_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.pyserve.inference.v1.Tensor.internal_static_io_pyserve_inference_v1_TorchTensorProto_descriptor;
      }

      @java.lang.Override
      public io.pyserve.inference.v1.Tensor.TorchTensorProto getDefaultInstanceForType() {
        return io.pyserve.inference.v1.Tensor.TorchTensorProto.getDefaultInstance();
      }

      @java.lang.Override
      public io.pyserve.inference.v1.Tensor.TorchTensorProto build() {
        io.pyserve.inference.v1.Tensor.TorchTensorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.pyserve.inference.v1.Tensor.TorchTensorProto buildPartial() {
        io.pyserve.inference.v1.Tensor.TorchTensorProto result = new io.pyserve.inference.v1.Tensor.TorchTensorProto(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.pyserve.inference.v1.Tensor.TorchTensorProto result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.dtype_ = dtype_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          tensorShape_.makeImmutable();
          result.tensorShape_ = tensorShape_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          boolVal_.makeImmutable();
          result.boolVal_ = boolVal_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          int8Val_.makeImmutable();
          result.int8Val_ = int8Val_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          int16Val_.makeImmutable();
          result.int16Val_ = int16Val_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          intVal_.makeImmutable();
          result.intVal_ = intVal_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          halfVal_.makeImmutable();
          result.halfVal_ = halfVal_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          int64Val_.makeImmutable();
          result.int64Val_ = int64Val_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          uint32Val_.makeImmutable();
          result.uint32Val_ = uint32Val_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          uint64Val_.makeImmutable();
          result.uint64Val_ = uint64Val_;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          floatVal_.makeImmutable();
          result.floatVal_ = floatVal_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          bfloat16Val_.makeImmutable();
          result.bfloat16Val_ = bfloat16Val_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          doubleVal_.makeImmutable();
          result.doubleVal_ = doubleVal_;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          stringVal_.makeImmutable();
          result.stringVal_ = stringVal_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.tensorContent_ = tensorContent_;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.customPayload_ = customPayload_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.pyserve.inference.v1.Tensor.TorchTensorProto) {
          return mergeFrom((io.pyserve.inference.v1.Tensor.TorchTensorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.pyserve.inference.v1.Tensor.TorchTensorProto other) {
        if (other == io.pyserve.inference.v1.Tensor.TorchTensorProto.getDefaultInstance()) return this;
        if (other.dtype_ != 0) {
          setDtypeValue(other.getDtypeValue());
        }
        if (!other.tensorShape_.isEmpty()) {
          if (tensorShape_.isEmpty()) {
            tensorShape_ = other.tensorShape_;
            tensorShape_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureTensorShapeIsMutable();
            tensorShape_.addAll(other.tensorShape_);
          }
          onChanged();
        }
        if (!other.boolVal_.isEmpty()) {
          if (boolVal_.isEmpty()) {
            boolVal_ = other.boolVal_;
            boolVal_.makeImmutable();
            bitField0_ |= 0x00000004;
          } else {
            ensureBoolValIsMutable();
            boolVal_.addAll(other.boolVal_);
          }
          onChanged();
        }
        if (!other.int8Val_.isEmpty()) {
          if (int8Val_.isEmpty()) {
            int8Val_ = other.int8Val_;
            int8Val_.makeImmutable();
            bitField0_ |= 0x00000008;
          } else {
            ensureInt8ValIsMutable();
            int8Val_.addAll(other.int8Val_);
          }
          onChanged();
        }
        if (!other.int16Val_.isEmpty()) {
          if (int16Val_.isEmpty()) {
            int16Val_ = other.int16Val_;
            int16Val_.makeImmutable();
            bitField0_ |= 0x00000010;
          } else {
            ensureInt16ValIsMutable();
            int16Val_.addAll(other.int16Val_);
          }
          onChanged();
        }
        if (!other.intVal_.isEmpty()) {
          if (intVal_.isEmpty()) {
            intVal_ = other.intVal_;
            intVal_.makeImmutable();
            bitField0_ |= 0x00000020;
          } else {
            ensureIntValIsMutable();
            intVal_.addAll(other.intVal_);
          }
          onChanged();
        }
        if (!other.halfVal_.isEmpty()) {
          if (halfVal_.isEmpty()) {
            halfVal_ = other.halfVal_;
            halfVal_.makeImmutable();
            bitField0_ |= 0x00000040;
          } else {
            ensureHalfValIsMutable();
            halfVal_.addAll(other.halfVal_);
          }
          onChanged();
        }
        if (!other.int64Val_.isEmpty()) {
          if (int64Val_.isEmpty()) {
            int64Val_ = other.int64Val_;
            int64Val_.makeImmutable();
            bitField0_ |= 0x00000080;
          } else {
            ensureInt64ValIsMutable();
            int64Val_.addAll(other.int64Val_);
          }
          onChanged();
        }
        if (!other.uint32Val_.isEmpty()) {
          if (uint32Val_.isEmpty()) {
            uint32Val_ = other.uint32Val_;
            uint32Val_.makeImmutable();
            bitField0_ |= 0x00000100;
          } else {
            ensureUint32ValIsMutable();
            uint32Val_.addAll(other.uint32Val_);
          }
          onChanged();
        }
        if (!other.uint64Val_.isEmpty()) {
          if (uint64Val_.isEmpty()) {
            uint64Val_ = other.uint64Val_;
            uint64Val_.makeImmutable();
            bitField0_ |= 0x00000200;
          } else {
            ensureUint64ValIsMutable();
            uint64Val_.addAll(other.uint64Val_);
          }
          onChanged();
        }
        if (!other.floatVal_.isEmpty()) {
          if (floatVal_.isEmpty()) {
            floatVal_ = other.floatVal_;
            floatVal_.makeImmutable();
            bitField0_ |= 0x00000400;
          } else {
            ensureFloatValIsMutable();
            floatVal_.addAll(other.floatVal_);
          }
          onChanged();
        }
        if (!other.bfloat16Val_.isEmpty()) {
          if (bfloat16Val_.isEmpty()) {
            bfloat16Val_ = other.bfloat16Val_;
            bfloat16Val_.makeImmutable();
            bitField0_ |= 0x00000800;
          } else {
            ensureBfloat16ValIsMutable();
            bfloat16Val_.addAll(other.bfloat16Val_);
          }
          onChanged();
        }
        if (!other.doubleVal_.isEmpty()) {
          if (doubleVal_.isEmpty()) {
            doubleVal_ = other.doubleVal_;
            doubleVal_.makeImmutable();
            bitField0_ |= 0x00001000;
          } else {
            ensureDoubleValIsMutable();
            doubleVal_.addAll(other.doubleVal_);
          }
          onChanged();
        }
        if (!other.stringVal_.isEmpty()) {
          if (stringVal_.isEmpty()) {
            stringVal_ = other.stringVal_;
            bitField0_ |= 0x00002000;
          } else {
            ensureStringValIsMutable();
            stringVal_.addAll(other.stringVal_);
          }
          onChanged();
        }
        if (!other.getTensorContent().isEmpty()) {
          setTensorContent(other.getTensorContent());
        }
        if (!other.getCustomPayload().isEmpty()) {
          customPayload_ = other.customPayload_;
          bitField0_ |= 0x00008000;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                dtype_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                long v = input.readInt64();
                ensureTensorShapeIsMutable();
                tensorShape_.addLong(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureTensorShapeIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  tensorShape_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                boolean v = input.readBool();
                ensureBoolValIsMutable();
                boolVal_.addBoolean(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureBoolValIsMutable(alloc / 1);
                while (input.getBytesUntilLimit() > 0) {
                  boolVal_.addBoolean(input.readBool());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 32: {
                int v = input.readInt32();
                ensureInt8ValIsMutable();
                int8Val_.addInt(v);
                break;
              } // case 32
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureInt8ValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  int8Val_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 34
              case 40: {
                int v = input.readInt32();
                ensureInt16ValIsMutable();
                int16Val_.addInt(v);
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureInt16ValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  int16Val_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 42
              case 48: {
                int v = input.readInt32();
                ensureIntValIsMutable();
                intVal_.addInt(v);
                break;
              } // case 48
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureIntValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  intVal_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 50
              case 56: {
                int v = input.readInt32();
                ensureHalfValIsMutable();
                halfVal_.addInt(v);
                break;
              } // case 56
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureHalfValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  halfVal_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 58
              case 64: {
                long v = input.readInt64();
                ensureInt64ValIsMutable();
                int64Val_.addLong(v);
                break;
              } // case 64
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureInt64ValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  int64Val_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 66
              case 72: {
                int v = input.readUInt32();
                ensureUint32ValIsMutable();
                uint32Val_.addInt(v);
                break;
              } // case 72
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureUint32ValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  uint32Val_.addInt(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              } // case 74
              case 80: {
                long v = input.readUInt64();
                ensureUint64ValIsMutable();
                uint64Val_.addLong(v);
                break;
              } // case 80
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureUint64ValIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  uint64Val_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 82
              case 93: {
                float v = input.readFloat();
                ensureFloatValIsMutable();
                floatVal_.addFloat(v);
                break;
              } // case 93
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureFloatValIsMutable(alloc / 4);
                while (input.getBytesUntilLimit() > 0) {
                  floatVal_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              } // case 90
              case 101: {
                float v = input.readFloat();
                ensureBfloat16ValIsMutable();
                bfloat16Val_.addFloat(v);
                break;
              } // case 101
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureBfloat16ValIsMutable(alloc / 4);
                while (input.getBytesUntilLimit() > 0) {
                  bfloat16Val_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              } // case 98
              case 105: {
                double v = input.readDouble();
                ensureDoubleValIsMutable();
                doubleVal_.addDouble(v);
                break;
              } // case 105
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureDoubleValIsMutable(alloc / 8);
                while (input.getBytesUntilLimit() > 0) {
                  doubleVal_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 114: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureStringValIsMutable();
                stringVal_.add(s);
                break;
              } // case 114
              case 122: {
                tensorContent_ = input.readBytes();
                bitField0_ |= 0x00004000;
                break;
              } // case 122
              case 130: {
                customPayload_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00008000;
                break;
              } // case 130
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int dtype_ = 0;
      /**
       * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
       * @return The enum numeric value on the wire for dtype.
       */
      @java.lang.Override public int getDtypeValue() {
        return dtype_;
      }
      /**
       * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
       * @param value The enum numeric value on the wire for dtype to set.
       * @return This builder for chaining.
       */
      public Builder setDtypeValue(int value) {
        dtype_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
       * @return The dtype.
       */
      @java.lang.Override
      public io.pyserve.inference.v1.Tensor.DataType getDtype() {
        io.pyserve.inference.v1.Tensor.DataType result = io.pyserve.inference.v1.Tensor.DataType.forNumber(dtype_);
        return result == null ? io.pyserve.inference.v1.Tensor.DataType.UNRECOGNIZED : result;
      }
      /**
       * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
       * @param value The dtype to set.
       * @return This builder for chaining.
       */
      public Builder setDtype(io.pyserve.inference.v1.Tensor.DataType value) {
        if (value == null) { throw new NullPointerException(); }
        bitField0_ |= 0x00000001;
        dtype_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.io.pyserve.inference.v1.DataType dtype = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDtype() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dtype_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList tensorShape_ = emptyLongList();
      private void ensureTensorShapeIsMutable() {
        if (!tensorShape_.isModifiable()) {
          tensorShape_ = makeMutableCopy(tensorShape_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @return A list containing the tensorShape.
       */
      public java.util.List<java.lang.Long>
          getTensorShapeList() {
        tensorShape_.makeImmutable();
        return tensorShape_;
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @return The count of tensorShape.
       */
      public int getTensorShapeCount() {
        return tensorShape_.size();
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @param index The index of the element to return.
       * @return The tensorShape at the given index.
       */
      public long getTensorShape(int index) {
        return tensorShape_.getLong(index);
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @param index The index to set the value at.
       * @param value The tensorShape to set.
       * @return This builder for chaining.
       */
      public Builder setTensorShape(
          int index, long value) {

        ensureTensorShapeIsMutable();
        tensorShape_.setLong(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @param value The tensorShape to add.
       * @return This builder for chaining.
       */
      public Builder addTensorShape(long value) {

        ensureTensorShapeIsMutable();
        tensorShape_.addLong(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @param values The tensorShape to add.
       * @return This builder for chaining.
       */
      public Builder addAllTensorShape(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureTensorShapeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tensorShape_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 tensor_shape = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTensorShape() {
        tensorShape_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.BooleanList boolVal_ = emptyBooleanList();
      private void ensureBoolValIsMutable() {
        if (!boolVal_.isModifiable()) {
          boolVal_ = makeMutableCopy(boolVal_);
        }
        bitField0_ |= 0x00000004;
      }
      private void ensureBoolValIsMutable(int capacity) {
        if (!boolVal_.isModifiable()) {
          boolVal_ = makeMutableCopy(boolVal_, capacity);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @return A list containing the boolVal.
       */
      public java.util.List<java.lang.Boolean>
          getBoolValList() {
        boolVal_.makeImmutable();
        return boolVal_;
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @return The count of boolVal.
       */
      public int getBoolValCount() {
        return boolVal_.size();
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The boolVal at the given index.
       */
      public boolean getBoolVal(int index) {
        return boolVal_.getBoolean(index);
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The boolVal to set.
       * @return This builder for chaining.
       */
      public Builder setBoolVal(
          int index, boolean value) {

        ensureBoolValIsMutable();
        boolVal_.setBoolean(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @param value The boolVal to add.
       * @return This builder for chaining.
       */
      public Builder addBoolVal(boolean value) {

        ensureBoolValIsMutable();
        boolVal_.addBoolean(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @param values The boolVal to add.
       * @return This builder for chaining.
       */
      public Builder addAllBoolVal(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureBoolValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, boolVal_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool bool_val = 3 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearBoolVal() {
        boolVal_ = emptyBooleanList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList int8Val_ = emptyIntList();
      private void ensureInt8ValIsMutable() {
        if (!int8Val_.isModifiable()) {
          int8Val_ = makeMutableCopy(int8Val_);
        }
        bitField0_ |= 0x00000008;
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @return A list containing the int8Val.
       */
      public java.util.List<java.lang.Integer>
          getInt8ValList() {
        int8Val_.makeImmutable();
        return int8Val_;
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @return The count of int8Val.
       */
      public int getInt8ValCount() {
        return int8Val_.size();
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The int8Val at the given index.
       */
      public int getInt8Val(int index) {
        return int8Val_.getInt(index);
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The int8Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt8Val(
          int index, int value) {

        ensureInt8ValIsMutable();
        int8Val_.setInt(index, value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @param value The int8Val to add.
       * @return This builder for chaining.
       */
      public Builder addInt8Val(int value) {

        ensureInt8ValIsMutable();
        int8Val_.addInt(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @param values The int8Val to add.
       * @return This builder for chaining.
       */
      public Builder addAllInt8Val(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInt8ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int8Val_);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int8_val = 4 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInt8Val() {
        int8Val_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList int16Val_ = emptyIntList();
      private void ensureInt16ValIsMutable() {
        if (!int16Val_.isModifiable()) {
          int16Val_ = makeMutableCopy(int16Val_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @return A list containing the int16Val.
       */
      public java.util.List<java.lang.Integer>
          getInt16ValList() {
        int16Val_.makeImmutable();
        return int16Val_;
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @return The count of int16Val.
       */
      public int getInt16ValCount() {
        return int16Val_.size();
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The int16Val at the given index.
       */
      public int getInt16Val(int index) {
        return int16Val_.getInt(index);
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The int16Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt16Val(
          int index, int value) {

        ensureInt16ValIsMutable();
        int16Val_.setInt(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @param value The int16Val to add.
       * @return This builder for chaining.
       */
      public Builder addInt16Val(int value) {

        ensureInt16ValIsMutable();
        int16Val_.addInt(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @param values The int16Val to add.
       * @return This builder for chaining.
       */
      public Builder addAllInt16Val(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInt16ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int16Val_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int16_val = 5 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInt16Val() {
        int16Val_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList intVal_ = emptyIntList();
      private void ensureIntValIsMutable() {
        if (!intVal_.isModifiable()) {
          intVal_ = makeMutableCopy(intVal_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @return A list containing the intVal.
       */
      public java.util.List<java.lang.Integer>
          getIntValList() {
        intVal_.makeImmutable();
        return intVal_;
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @return The count of intVal.
       */
      public int getIntValCount() {
        return intVal_.size();
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The intVal at the given index.
       */
      public int getIntVal(int index) {
        return intVal_.getInt(index);
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The intVal to set.
       * @return This builder for chaining.
       */
      public Builder setIntVal(
          int index, int value) {

        ensureIntValIsMutable();
        intVal_.setInt(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @param value The intVal to add.
       * @return This builder for chaining.
       */
      public Builder addIntVal(int value) {

        ensureIntValIsMutable();
        intVal_.addInt(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @param values The intVal to add.
       * @return This builder for chaining.
       */
      public Builder addAllIntVal(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIntValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, intVal_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 int_val = 6 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearIntVal() {
        intVal_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList halfVal_ = emptyIntList();
      private void ensureHalfValIsMutable() {
        if (!halfVal_.isModifiable()) {
          halfVal_ = makeMutableCopy(halfVal_);
        }
        bitField0_ |= 0x00000040;
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @return A list containing the halfVal.
       */
      public java.util.List<java.lang.Integer>
          getHalfValList() {
        halfVal_.makeImmutable();
        return halfVal_;
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @return The count of halfVal.
       */
      public int getHalfValCount() {
        return halfVal_.size();
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The halfVal at the given index.
       */
      public int getHalfVal(int index) {
        return halfVal_.getInt(index);
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The halfVal to set.
       * @return This builder for chaining.
       */
      public Builder setHalfVal(
          int index, int value) {

        ensureHalfValIsMutable();
        halfVal_.setInt(index, value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @param value The halfVal to add.
       * @return This builder for chaining.
       */
      public Builder addHalfVal(int value) {

        ensureHalfValIsMutable();
        halfVal_.addInt(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @param values The halfVal to add.
       * @return This builder for chaining.
       */
      public Builder addAllHalfVal(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHalfValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, halfVal_);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 half_val = 7 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearHalfVal() {
        halfVal_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList int64Val_ = emptyLongList();
      private void ensureInt64ValIsMutable() {
        if (!int64Val_.isModifiable()) {
          int64Val_ = makeMutableCopy(int64Val_);
        }
        bitField0_ |= 0x00000080;
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @return A list containing the int64Val.
       */
      public java.util.List<java.lang.Long>
          getInt64ValList() {
        int64Val_.makeImmutable();
        return int64Val_;
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @return The count of int64Val.
       */
      public int getInt64ValCount() {
        return int64Val_.size();
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The int64Val at the given index.
       */
      public long getInt64Val(int index) {
        return int64Val_.getLong(index);
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The int64Val to set.
       * @return This builder for chaining.
       */
      public Builder setInt64Val(
          int index, long value) {

        ensureInt64ValIsMutable();
        int64Val_.setLong(index, value);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @param value The int64Val to add.
       * @return This builder for chaining.
       */
      public Builder addInt64Val(long value) {

        ensureInt64ValIsMutable();
        int64Val_.addLong(value);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @param values The int64Val to add.
       * @return This builder for chaining.
       */
      public Builder addAllInt64Val(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureInt64ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int64Val_);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 int64_val = 8 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInt64Val() {
        int64Val_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList uint32Val_ = emptyIntList();
      private void ensureUint32ValIsMutable() {
        if (!uint32Val_.isModifiable()) {
          uint32Val_ = makeMutableCopy(uint32Val_);
        }
        bitField0_ |= 0x00000100;
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @return A list containing the uint32Val.
       */
      public java.util.List<java.lang.Integer>
          getUint32ValList() {
        uint32Val_.makeImmutable();
        return uint32Val_;
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @return The count of uint32Val.
       */
      public int getUint32ValCount() {
        return uint32Val_.size();
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The uint32Val at the given index.
       */
      public int getUint32Val(int index) {
        return uint32Val_.getInt(index);
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The uint32Val to set.
       * @return This builder for chaining.
       */
      public Builder setUint32Val(
          int index, int value) {

        ensureUint32ValIsMutable();
        uint32Val_.setInt(index, value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @param value The uint32Val to add.
       * @return This builder for chaining.
       */
      public Builder addUint32Val(int value) {

        ensureUint32ValIsMutable();
        uint32Val_.addInt(value);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @param values The uint32Val to add.
       * @return This builder for chaining.
       */
      public Builder addAllUint32Val(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUint32ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, uint32Val_);
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 uint32_val = 9 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUint32Val() {
        uint32Val_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList uint64Val_ = emptyLongList();
      private void ensureUint64ValIsMutable() {
        if (!uint64Val_.isModifiable()) {
          uint64Val_ = makeMutableCopy(uint64Val_);
        }
        bitField0_ |= 0x00000200;
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @return A list containing the uint64Val.
       */
      public java.util.List<java.lang.Long>
          getUint64ValList() {
        uint64Val_.makeImmutable();
        return uint64Val_;
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @return The count of uint64Val.
       */
      public int getUint64ValCount() {
        return uint64Val_.size();
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The uint64Val at the given index.
       */
      public long getUint64Val(int index) {
        return uint64Val_.getLong(index);
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The uint64Val to set.
       * @return This builder for chaining.
       */
      public Builder setUint64Val(
          int index, long value) {

        ensureUint64ValIsMutable();
        uint64Val_.setLong(index, value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @param value The uint64Val to add.
       * @return This builder for chaining.
       */
      public Builder addUint64Val(long value) {

        ensureUint64ValIsMutable();
        uint64Val_.addLong(value);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @param values The uint64Val to add.
       * @return This builder for chaining.
       */
      public Builder addAllUint64Val(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureUint64ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, uint64Val_);
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 uint64_val = 10 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUint64Val() {
        uint64Val_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList floatVal_ = emptyFloatList();
      private void ensureFloatValIsMutable() {
        if (!floatVal_.isModifiable()) {
          floatVal_ = makeMutableCopy(floatVal_);
        }
        bitField0_ |= 0x00000400;
      }
      private void ensureFloatValIsMutable(int capacity) {
        if (!floatVal_.isModifiable()) {
          floatVal_ = makeMutableCopy(floatVal_, capacity);
        }
        bitField0_ |= 0x00000400;
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @return A list containing the floatVal.
       */
      public java.util.List<java.lang.Float>
          getFloatValList() {
        floatVal_.makeImmutable();
        return floatVal_;
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @return The count of floatVal.
       */
      public int getFloatValCount() {
        return floatVal_.size();
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The floatVal at the given index.
       */
      public float getFloatVal(int index) {
        return floatVal_.getFloat(index);
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The floatVal to set.
       * @return This builder for chaining.
       */
      public Builder setFloatVal(
          int index, float value) {

        ensureFloatValIsMutable();
        floatVal_.setFloat(index, value);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @param value The floatVal to add.
       * @return This builder for chaining.
       */
      public Builder addFloatVal(float value) {

        ensureFloatValIsMutable();
        floatVal_.addFloat(value);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @param values The floatVal to add.
       * @return This builder for chaining.
       */
      public Builder addAllFloatVal(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, floatVal_);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_val = 11 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFloatVal() {
        floatVal_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList bfloat16Val_ = emptyFloatList();
      private void ensureBfloat16ValIsMutable() {
        if (!bfloat16Val_.isModifiable()) {
          bfloat16Val_ = makeMutableCopy(bfloat16Val_);
        }
        bitField0_ |= 0x00000800;
      }
      private void ensureBfloat16ValIsMutable(int capacity) {
        if (!bfloat16Val_.isModifiable()) {
          bfloat16Val_ = makeMutableCopy(bfloat16Val_, capacity);
        }
        bitField0_ |= 0x00000800;
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @return A list containing the bfloat16Val.
       */
      public java.util.List<java.lang.Float>
          getBfloat16ValList() {
        bfloat16Val_.makeImmutable();
        return bfloat16Val_;
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @return The count of bfloat16Val.
       */
      public int getBfloat16ValCount() {
        return bfloat16Val_.size();
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The bfloat16Val at the given index.
       */
      public float getBfloat16Val(int index) {
        return bfloat16Val_.getFloat(index);
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The bfloat16Val to set.
       * @return This builder for chaining.
       */
      public Builder setBfloat16Val(
          int index, float value) {

        ensureBfloat16ValIsMutable();
        bfloat16Val_.setFloat(index, value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @param value The bfloat16Val to add.
       * @return This builder for chaining.
       */
      public Builder addBfloat16Val(float value) {

        ensureBfloat16ValIsMutable();
        bfloat16Val_.addFloat(value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @param values The bfloat16Val to add.
       * @return This builder for chaining.
       */
      public Builder addAllBfloat16Val(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBfloat16ValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bfloat16Val_);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>repeated float bfloat16_val = 12 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearBfloat16Val() {
        bfloat16Val_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList doubleVal_ = emptyDoubleList();
      private void ensureDoubleValIsMutable() {
        if (!doubleVal_.isModifiable()) {
          doubleVal_ = makeMutableCopy(doubleVal_);
        }
        bitField0_ |= 0x00001000;
      }
      private void ensureDoubleValIsMutable(int capacity) {
        if (!doubleVal_.isModifiable()) {
          doubleVal_ = makeMutableCopy(doubleVal_, capacity);
        }
        bitField0_ |= 0x00001000;
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @return A list containing the doubleVal.
       */
      public java.util.List<java.lang.Double>
          getDoubleValList() {
        doubleVal_.makeImmutable();
        return doubleVal_;
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @return The count of doubleVal.
       */
      public int getDoubleValCount() {
        return doubleVal_.size();
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The doubleVal at the given index.
       */
      public double getDoubleVal(int index) {
        return doubleVal_.getDouble(index);
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The doubleVal to set.
       * @return This builder for chaining.
       */
      public Builder setDoubleVal(
          int index, double value) {

        ensureDoubleValIsMutable();
        doubleVal_.setDouble(index, value);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @param value The doubleVal to add.
       * @return This builder for chaining.
       */
      public Builder addDoubleVal(double value) {

        ensureDoubleValIsMutable();
        doubleVal_.addDouble(value);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @param values The doubleVal to add.
       * @return This builder for chaining.
       */
      public Builder addAllDoubleVal(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubleVal_);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_val = 13 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubleVal() {
        doubleVal_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList stringVal_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureStringValIsMutable() {
        if (!stringVal_.isModifiable()) {
          stringVal_ = new com.google.protobuf.LazyStringArrayList(stringVal_);
        }
        bitField0_ |= 0x00002000;
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @return A list containing the stringVal.
       */
      public com.google.protobuf.ProtocolStringList
          getStringValList() {
        stringVal_.makeImmutable();
        return stringVal_;
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @return The count of stringVal.
       */
      public int getStringValCount() {
        return stringVal_.size();
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @param index The index of the element to return.
       * @return The stringVal at the given index.
       */
      public java.lang.String getStringVal(int index) {
        return stringVal_.get(index);
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @param index The index of the value to return.
       * @return The bytes of the stringVal at the given index.
       */
      public com.google.protobuf.ByteString
          getStringValBytes(int index) {
        return stringVal_.getByteString(index);
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @param index The index to set the value at.
       * @param value The stringVal to set.
       * @return This builder for chaining.
       */
      public Builder setStringVal(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringValIsMutable();
        stringVal_.set(index, value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @param value The stringVal to add.
       * @return This builder for chaining.
       */
      public Builder addStringVal(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringValIsMutable();
        stringVal_.add(value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @param values The stringVal to add.
       * @return This builder for chaining.
       */
      public Builder addAllStringVal(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringValIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stringVal_);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringVal() {
        stringVal_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_val = 14;</code>
       * @param value The bytes of the stringVal to add.
       * @return This builder for chaining.
       */
      public Builder addStringValBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureStringValIsMutable();
        stringVal_.add(value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString tensorContent_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Raw bytes (fallback/custom mode)
       * </pre>
       *
       * <code>bytes tensor_content = 15;</code>
       * @return The tensorContent.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTensorContent() {
        return tensorContent_;
      }
      /**
       * <pre>
       * Raw bytes (fallback/custom mode)
       * </pre>
       *
       * <code>bytes tensor_content = 15;</code>
       * @param value The tensorContent to set.
       * @return This builder for chaining.
       */
      public Builder setTensorContent(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        tensorContent_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw bytes (fallback/custom mode)
       * </pre>
       *
       * <code>bytes tensor_content = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearTensorContent() {
        bitField0_ = (bitField0_ & ~0x00004000);
        tensorContent_ = getDefaultInstance().getTensorContent();
        onChanged();
        return this;
      }

      private java.lang.Object customPayload_ = "";
      /**
       * <pre>
       * for things like serialized JSON or Base64
       * </pre>
       *
       * <code>string custom_payload = 16;</code>
       * @return The customPayload.
       */
      public java.lang.String getCustomPayload() {
        java.lang.Object ref = customPayload_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          customPayload_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * for things like serialized JSON or Base64
       * </pre>
       *
       * <code>string custom_payload = 16;</code>
       * @return The bytes for customPayload.
       */
      public com.google.protobuf.ByteString
          getCustomPayloadBytes() {
        java.lang.Object ref = customPayload_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          customPayload_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * for things like serialized JSON or Base64
       * </pre>
       *
       * <code>string custom_payload = 16;</code>
       * @param value The customPayload to set.
       * @return This builder for chaining.
       */
      public Builder setCustomPayload(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        customPayload_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * for things like serialized JSON or Base64
       * </pre>
       *
       * <code>string custom_payload = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearCustomPayload() {
        customPayload_ = getDefaultInstance().getCustomPayload();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * for things like serialized JSON or Base64
       * </pre>
       *
       * <code>string custom_payload = 16;</code>
       * @param value The bytes for customPayload to set.
       * @return This builder for chaining.
       */
      public Builder setCustomPayloadBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        customPayload_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.pyserve.inference.v1.TorchTensorProto)
    }

    // @@protoc_insertion_point(class_scope:io.pyserve.inference.v1.TorchTensorProto)
    private static final io.pyserve.inference.v1.Tensor.TorchTensorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.pyserve.inference.v1.Tensor.TorchTensorProto();
    }

    public static io.pyserve.inference.v1.Tensor.TorchTensorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TorchTensorProto>
        PARSER = new com.google.protobuf.AbstractParser<TorchTensorProto>() {
      @java.lang.Override
      public TorchTensorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TorchTensorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TorchTensorProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.pyserve.inference.v1.Tensor.TorchTensorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pyserve_inference_v1_TorchTensorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pyserve_inference_v1_TorchTensorProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014tensor.proto\022\027io.pyserve.inference.v1\"" +
      "\234\003\n\020TorchTensorProto\0220\n\005dtype\030\001 \001(\0162!.io" +
      ".pyserve.inference.v1.DataType\022\024\n\014tensor" +
      "_shape\030\002 \003(\003\022\024\n\010bool_val\030\003 \003(\010B\002\020\001\022\024\n\010in" +
      "t8_val\030\004 \003(\005B\002\020\001\022\025\n\tint16_val\030\005 \003(\005B\002\020\001\022" +
      "\023\n\007int_val\030\006 \003(\005B\002\020\001\022\024\n\010half_val\030\007 \003(\005B\002" +
      "\020\001\022\025\n\tint64_val\030\010 \003(\003B\002\020\001\022\026\n\nuint32_val\030" +
      "\t \003(\rB\002\020\001\022\026\n\nuint64_val\030\n \003(\004B\002\020\001\022\025\n\tflo" +
      "at_val\030\013 \003(\002B\002\020\001\022\030\n\014bfloat16_val\030\014 \003(\002B\002" +
      "\020\001\022\026\n\ndouble_val\030\r \003(\001B\002\020\001\022\022\n\nstring_val" +
      "\030\016 \003(\t\022\026\n\016tensor_content\030\017 \001(\014\022\026\n\016custom" +
      "_payload\030\020 \001(\t*\202\002\n\010DataType\022\013\n\007INVALID\020\000" +
      "\022\010\n\004BOOL\020\003\022\010\n\004INT8\020\004\022\t\n\005INT16\020\005\022\t\n\005INT32" +
      "\020\006\022\010\n\004HALF\020\007\022\t\n\005INT64\020\010\022\n\n\006UINT32\020\t\022\n\n\006U" +
      "INT64\020\n\022\t\n\005QINT8\020\021\022\n\n\006QUINT8\020\022\022\n\n\006QINT16" +
      "\020\023\022\013\n\007QUINT16\020\024\022\n\n\006QINT32\020\025\022\t\n\005FLOAT\020\013\022\014" +
      "\n\010BFLOAT16\020\014\022\n\n\006DOUBLE\020\r\022\016\n\nSTRING_VAL\020\016" +
      "\022\r\n\tRAW_BYTES\020\017\022\022\n\016STRING_PAYLOAD\020\020b\006pro" +
      "to3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_io_pyserve_inference_v1_TorchTensorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_pyserve_inference_v1_TorchTensorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pyserve_inference_v1_TorchTensorProto_descriptor,
        new java.lang.String[] { "Dtype", "TensorShape", "BoolVal", "Int8Val", "Int16Val", "IntVal", "HalfVal", "Int64Val", "Uint32Val", "Uint64Val", "FloatVal", "Bfloat16Val", "DoubleVal", "StringVal", "TensorContent", "CustomPayload", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
